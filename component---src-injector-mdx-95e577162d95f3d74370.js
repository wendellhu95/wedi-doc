(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{RxwW:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return a})),t.d(n,"default",(function(){return d}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk");var c=t("/FXl"),i=t("TjRS");t("aD51");function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var c in t)Object.prototype.hasOwnProperty.call(t,c)&&(e[c]=t[c])}return e}).apply(this,arguments)}var a={};void 0!==a&&a&&a===Object(a)&&Object.isExtensible(a)&&!a.hasOwnProperty("__filemeta")&&Object.defineProperty(a,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/injector.mdx"}});var r={_frontmatter:a},l=i.a;function d(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,c,i={},o=Object.keys(e);for(c=0;c<o.length;c++)t=o[c],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,["components"]);return Object(c.b)(l,o({},r,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"dependency-injection"},"Dependency Injection"),Object(c.b)("p",null,"In case you are not familiar with dependency injection pattern, here are three major concepts in a dependency injection system you should know:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Dependency Item"),": Anything that could be used by other classes or React components. Usually they are identified by ",Object(c.b)("inlineCode",{parentName:"li"},"key"),"s. A dependency could be a class, a value or a function, etc."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Provider")," (a.k.a injector). The manager of dependency items. It ",Object(c.b)("em",{parentName:"li"},"provides")," dependency items and instantiate or evaluate dependency items at consumers' need."),Object(c.b)("li",{parentName:"ul"},Object(c.b)("strong",{parentName:"li"},"Consumer"),": They consume dependency items. They use ",Object(c.b)("inlineCode",{parentName:"li"},"key"),"s to get dependency items. A consumers can be a dependency item at the same time.")),Object(c.b)("h2",{id:"dependencycollection"},"DependencyCollection"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"DependencyCollection")," is used to collect dependencies. Later it would be passed into an injector."),Object(c.b)("pre",null,Object(c.b)("code",o({parentName:"pre"},{className:"language-ts"}),"const collection = new DependencyCollection([\n  // ...items\n])\n")),Object(c.b)("h2",{id:"injector"},"Injector"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"Injector")," is the one who instantiates, provides and manages dependencies. And they will form a layered injection system."),Object(c.b)("pre",null,Object(c.b)("code",o({parentName:"pre"},{className:"language-tsx"}),"const injector = new Injector(collection)\n")),Object(c.b)("h2",{id:"multi-layered-injector-system"},"Multi-Layered Injector System"),Object(c.b)("p",null,"wedi supports multi-layered injector system. In another word, every injector could have child injectors. A child injector could ask its parent injector for a dependency when it could not provide a by itself."),Object(c.b)("h2",{id:"why-dependency-injection"},"Why Dependency Injection?"))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/injector.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-injector-mdx-95e577162d95f3d74370.js.map