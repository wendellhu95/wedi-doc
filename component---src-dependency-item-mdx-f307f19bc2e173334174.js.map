{"version":3,"sources":["webpack:///../src/dependency-item.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0eAMO,IAAMA,EAAe,Q,yMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,qFACA,sBACE,kBAAIC,WAAW,MAAf,WACA,kBAAIA,WAAW,MAAf,wBACA,kBAAIA,WAAW,MAAf,sBAEF,iBAAQ,CACN,GAAM,4BACL,0BAAYA,WAAW,MAAvB,OAFH,yBAGA,iEAAgD,0BAAYA,WAAW,KAAvB,kBAAhD,0CAAqJ,kBAAIA,WAAW,KAAf,OAArJ,MAA2L,kBAAIA,WAAW,KAAf,SAA3L,+CAA4Q,kBAAIA,WAAW,KAAf,OAA5Q,iEAA6W,kBAAIA,WAAW,KAAf,OAA7W,qCACA,qBAAG,kBAAIA,WAAW,KAAf,OAAH,yCAA4E,0BAAYA,WAAW,KAAvB,oBAA5E,KACA,iCAAgB,0BAAYA,WAAW,KAAvB,OAAhB,uHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kMAWL,qBAAG,kBAAIA,WAAW,KAAf,uEACH,iBAAQ,CACN,GAAM,uBADR,uBAGA,qNACA,oCAAmB,0BAAYA,WAAW,KAAvB,QAAnB,oBAAwF,0BAAYA,WAAW,KAAvB,eAAxF,eAA+J,0BAAYA,WAAW,KAAvB,oBAA/J,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6GAML,yDAAwC,0BAAYA,WAAW,KAAvB,oBAAxC,2BAAgI,0BAAYA,WAAW,KAAvB,eAAhI,uCAA+N,0BAAYA,WAAW,KAAvB,oBAA/N,6BACA,mDAAkC,0BAAYA,WAAW,KAAvB,oBAAlC,gGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qGAML,6CAA4B,0BAAYA,WAAW,KAAvB,YAA5B,iDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8GAML,2BAAU,0BAAYA,WAAW,KAAvB,sBAAV,8DAAuI,0BAAYA,WAAW,KAAvB,QAAvI,2BAAmN,0BAAYA,WAAW,KAAvB,eAAnN,KACA,iBAAQ,CACN,GAAM,mCADR,mCAGA,oEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wDAIL,iBAAQ,CACN,GAAM,kCADR,kCAGA,wDAAuC,0BAAYA,WAAW,KAAvB,cAAvC,6DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uMAOL,iBAAQ,CACN,GAAM,iBADR,iBAGA,2GAA0F,0BAAYA,WAAW,KAAvB,wBAA1F,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sTAiBL,iBAAQ,CACN,GAAM,wBADR,wBAGA,8GAA6F,0BAAYA,WAAW,KAAvB,qBAA7F,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iDAIL,0IAAyH,0BAAYA,WAAW,KAAvB,UAAzH,eACA,iBAAQ,CACN,GAAM,sBADR,4B,uMAOJJ,EAAWK,gBAAiB","file":"component---src-dependency-item-mdx-f307f19bc2e173334174.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/Developer/Repos/wedi/doc/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dependency-item\"\n    }}>{`Dependency Item`}</h1>\n    <p>{`wedi supports different kinds of dependency items, including`}</p>\n    <ul>\n      <li parentName=\"ul\">{`classes`}</li>\n      <li parentName=\"ul\">{`instances and values`}</li>\n      <li parentName=\"ul\">{`factory functions`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"key-of-a-dependency-item\"\n    }}><inlineCode parentName=\"h2\">{`key`}</inlineCode>{` of a Dependency Item`}</h2>\n    <p>{`When you provide a dependency item (type `}<inlineCode parentName=\"p\">{`DependencyItem`}</inlineCode>{`), you're actually injecting a pair of `}<em parentName=\"p\">{`key`}</em>{` & `}<em parentName=\"p\">{`value`}</em>{`. The value is the dependency item, and the `}<em parentName=\"p\">{`key`}</em>{` is the identifier of it. Specially, a ES6 class could be the `}<em parentName=\"p\">{`key`}</em>{` and the value and the same time.`}</p>\n    <p><em parentName=\"p\">{`key`}</em>{` is an identifier returned by calling `}<inlineCode parentName=\"p\">{`createIdentifier`}</inlineCode>{`.`}</p>\n    <p>{`Not that `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{` or identifier is required when providing values, instances or factory methods but optional when providing classes.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createIdentifier } from 'wedi'\n\nexport interface IPlatform {\n  // properties\n  // methods\n}\n\nexport const IPlatformService = createIdentifier<IPlatformService>('platform')\n`}</code></pre>\n    <p><em parentName=\"p\">{`You can use the same name for a variable and a type in TypeScript.`}</em></p>\n    <h2 {...{\n      \"id\": \"class-as-dependency\"\n    }}>{`Class as Dependency`}</h2>\n    <p>{`An ES6 class could be a dependency item. You can declare its dependencies in its constructor. wedi would analyze dependency relation among different classes and instantiate them correctly.`}</p>\n    <p>{`You can use `}<inlineCode parentName=\"p\">{`Need`}</inlineCode>{` to declare that `}<inlineCode parentName=\"p\">{`FileService`}</inlineCode>{` depends on `}<inlineCode parentName=\"p\">{`IPlatformService`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class FileService {\n  constructor(@Need(IPlatformService) private logService: IPlatformService) {}\n}\n`}</code></pre>\n    <p>{`wedi would get or instantiates a `}<inlineCode parentName=\"p\">{`IPlatformService`}</inlineCode>{` before it instantiates `}<inlineCode parentName=\"p\">{`FileService`}</inlineCode>{`. And if it could not instantiate a `}<inlineCode parentName=\"p\">{`IPlatformService`}</inlineCode>{` it would throw an error.`}</p>\n    <p>{`And identifiers created by `}<inlineCode parentName=\"p\">{`createIdentifier`}</inlineCode>{` could also be used to define dependency relationship. It's equivalent to the example above.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class SomeService {\n  constructor(@IPlatformService private platform: IPlatformService) {}\n}\n`}</code></pre>\n    <p>{`You can also use the `}<inlineCode parentName=\"p\">{`Optional`}</inlineCode>{` decorator to declare an optional dependency.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`class FileService {\n  constructor(@Optional(OptionalDependency) private op?: OptionalDependency) {}\n}\n`}</code></pre>\n    <p>{`If `}<inlineCode parentName=\"p\">{`OptionalDependency`}</inlineCode>{` is not provided, wedi would not throw an error but return `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` instead to instantiate `}<inlineCode parentName=\"p\">{`FileService`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"value-or-instance-as-dependency\"\n    }}>{`Value or Instance as Dependency`}</h2>\n    <p>{`It's easy to provide a value as dependency.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const configDep = [IConfig, { useValue: '2020' }]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"factory-function-as-dependency\"\n    }}>{`Factory Function as Dependency`}</h2>\n    <p>{`You can create a dependency via `}<inlineCode parentName=\"p\">{`useFactory`}</inlineCode>{` that gives the control flow back to you on initializing.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const useDep = [IUserService, {\n  useFactory: (http: IHTTPService): IUserService => new TimeSerialUserService(http, TIME)ï¼Œ\n  deps: [IHTTPService] // this factory depends on IHTTPService.\n}]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"provide-items\"\n    }}>{`Provide Items`}</h2>\n    <p>{`Finally, you should wrap all items in an array and pass them to the constructor of `}<inlineCode parentName=\"p\">{`DependencyCollection`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const dependencies = [\n  LogService,\n  FileService,\n  [IConfig, { useValue: '2020' }],\n  [\n    IUserService,\n    {\n      useFactory: (http: IHTTPService): IUserService =>\n        new TimeSerialUserService(http, TIME),\n      deps: [IHTTPService]\n    }\n  ],\n  [IHTTPService, WebHTTPService]\n]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"singleton-dependency\"\n    }}>{`Singleton Dependency`}</h2>\n    <p>{`For dependencies that should be singleton in the application, it's recommended to use `}<inlineCode parentName=\"p\">{`registerSingleton`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`registerSingleton(/* a dependency item */)\n`}</code></pre>\n    <p>{`Dependencies would be provided by the root provider. In another word, the provider which is constructed without a `}<inlineCode parentName=\"p\">{`parent`}</inlineCode>{` parameter.`}</p>\n    <h2 {...{\n      \"id\": \"lazy-instantiation\"\n    }}>{`Lazy Instantiation`}</h2>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}