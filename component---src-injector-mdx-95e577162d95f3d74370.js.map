{"version":3,"sources":["webpack:///../src/injector.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,kMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,wBAGA,wKACA,sBACE,kBAAIC,WAAW,MAAK,sBAAQA,WAAW,MAAnB,mBAApB,sGAA+K,0BAAYA,WAAW,MAAvB,OAA/K,iEACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,YAApB,0DAA4H,kBAAIA,WAAW,MAAf,YAA5H,sFACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,YAApB,6CAA+G,0BAAYA,WAAW,MAAvB,OAA/G,sFAEF,iBAAQ,CACN,GAAM,wBADR,wBAGA,qBAAG,0BAAYA,WAAW,KAAvB,wBAAH,gFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uEAML,iBAAQ,CACN,GAAM,YADR,YAGA,qBAAG,0BAAYA,WAAW,KAAvB,YAAH,mHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gDAIL,iBAAQ,CACN,GAAM,iCADR,iCAGA,wOACA,iBAAQ,CACN,GAAM,4BADR,mC,gMAOJJ,EAAWK,gBAAiB","file":"component---src-injector-mdx-95e577162d95f3d74370.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"D:/Developer/Repos/wedi/doc/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dependency-injection\"\n    }}>{`Dependency Injection`}</h1>\n    <p>{`In case you are not familiar with dependency injection pattern, here are three major concepts in a dependency injection system you should know:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Dependency Item`}</strong>{`: Anything that could be used by other classes or React components. Usually they are identified by `}<inlineCode parentName=\"li\">{`key`}</inlineCode>{`s. A dependency could be a class, a value or a function, etc.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Provider`}</strong>{` (a.k.a injector). The manager of dependency items. It `}<em parentName=\"li\">{`provides`}</em>{` dependency items and instantiate or evaluate dependency items at consumers' need.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Consumer`}</strong>{`: They consume dependency items. They use `}<inlineCode parentName=\"li\">{`key`}</inlineCode>{`s to get dependency items. A consumers can be a dependency item at the same time.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"dependencycollection\"\n    }}>{`DependencyCollection`}</h2>\n    <p><inlineCode parentName=\"p\">{`DependencyCollection`}</inlineCode>{` is used to collect dependencies. Later it would be passed into an injector.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`const collection = new DependencyCollection([\n  // ...items\n])\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"injector\"\n    }}>{`Injector`}</h2>\n    <p><inlineCode parentName=\"p\">{`Injector`}</inlineCode>{` is the one who instantiates, provides and manages dependencies. And they will form a layered injection system.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const injector = new Injector(collection)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"multi-layered-injector-system\"\n    }}>{`Multi-Layered Injector System`}</h2>\n    <p>{`wedi supports multi-layered injector system. In another word, every injector could have child injectors. A child injector could ask its parent injector for a dependency when it could not provide a by itself.`}</p>\n    <h2 {...{\n      \"id\": \"why-dependency-injection\"\n    }}>{`Why Dependency Injection?`}</h2>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}